#!/bin/ksh
#
# flashrd initializer with default vnd image destination (or disk destination on demand)
#
# Chris Cappuccio <chris@nmedia.net>

date=`date +%Y%m%d`
arch=`uname -m`
vers=2.0

typeset -x device rootdevice blocks rdroot dest vnddirs
typeset -x tardirs tmpfsdirs totalsize vers
typeset -x bytessec vnd distloc tmpmnt TMPDIR elfrdsetrootdir

blocks=4600				# blocks to reserve for kernel ramdisk
rdroot=rd.$arch-$date			# ramdisk root fs image
dest=flashimg.$arch-$date		# final product

# See ./etc/rc.flashrd.sub to define tardirs, vnddirs, tmpfsdirs
#
. ./etc/rc.flashrd.sub

set -A part a d e f g h i j k l m n o p

# Completely ignored if -disk is specified
totalsize=1951488
#
# Normally 512 (but, who knows, times they are a changin'!)
bytessec=512

# Set to true when the device is an image file false when a device is used.
vnd=true

[ `id -u` != 0 ] && echo root required && exit 1

. ./flashrd.sub

getavailvnd 2
device=${vndevices[0]}
rootdevice=${vndevices[1]}		# used to mount flash vnd

vncfgroot() {
 [[ $vnd == true ]] && c 0 vnconfig $1 $2
}

vnuncfgroot() {
 [[ $vnd == true ]] && c 0 vnconfig -u $1
}

usage() {
 cat <<EOF
Usage: flashrd [options] <openbsd base>

flashrd will create flash image file in absence of a disk name.

Write direct to disk:
    -d "dev"	Simple disk name (such as wd3 or sd2)

Write to disk image:
    -l n	Number of total sectors (default $totalsize or `sectors2mbytes $totalsize`MB)

Location of final image:
    -i "dir"    Directory of final image

Other options:
    -e "dir"    directory where elfrdsetroot.c is located

EOF
}

echo $*

while :
do
 case $1 in
  -\?) usage; exit 0;;
  -d | -disk) t2 "$2"; rootdevice="$2"; vnd=false; shift 2;;
  -l) t2 "$2"; totalsize="$2"; shift 2;;
  -b) t2 "$2"; bytessec="$2"; shift 2;;
  -e) t2 "$2"; elfrdsetrootdir="$2"; shift 2;;
  -i) t2 "$2"; destdir="$2"; shift 2;;

  --) shift; break;;
  -*) usage; exit 1;;
  *) break;;
 esac
done

if [ $# -ne 1 ]
then
 usage
 exit 1
else
 distloc=$1
fi

echo "flashrd $vers chris@nmedia.net"
echo
if [ ! -d "$distloc" ]; then
 echo % $distloc is not a directory
 exit 1
else
 if [ ! -f "$distloc"/etc/services ]; then
  echo % $distloc does not contain an unpacked etcXX.tgz file
  exit 1
 fi
 if [ ! -f "$distloc"/bin/ksh ]; then
  echo % $distloc does not contain an unpacked baseXX.tgz file
  exit 1
 fi
 if [ ! -u "$distloc"/usr/bin/passwd ]; then
  echo "% $distloc was not unpacked with tar p flag (to preserve permissions),"
  echo "or it was not unpacked as root (to allow set ownership)"
  exit 1
 fi
fi

if [ x"${destdir}" != "x" -a ! -d "$destdir" ]; then
  echo % $destdir is not a directory
  exit 1
elif [ "x${destdir}" != "x" ]; then
  dest=${destdir}/${dest}
fi

echo "Building image in $dest"

if [[ -n $elfrdsetrootdir && ! -d $elfrdsetrootdir ]]; then
 echo % elfrdsetrootdir $elfrdsetrootdir not found
fi

###
#
# fall back

4() {
 umount $tmpmntvnd
}
3() {
 vnconfig -u $device
}
2() {
 umount $tmpmnt
}
1() {
 vnuncfgroot $rootdevice
}
0() {
 echo % TMPDIR: $TMPDIR
 exit 1
}

###
#
# (Re-)Base TMPDIR to a subdiretory of either the current
# TMPDIR value, or to /tmp

TMPDIR=$(c 0 mktemp -t -d flashrd.XXXXXX)

###
#
# generate kernel ramdisk

c 0 ./mkrdroot

# $rdroot should now have a ramdisk image

###
#
# generate boot image

c 0 ./mkboot

# $dest should now have a boot image

tmpmnt=$TMPDIR/tmpmnt
c 0 mkdir $tmpmnt

vncfgroot $rootdevice $dest

c 1 mount /dev/"$rootdevice"a $tmpmnt

###
#
# generate kernel

c 2 ./mkkern

###
#
# generate vnd, tar files

c 2 ./mkdist

umountwait 1 $tmpmnt

###
#
# done with flash img vnd

vnuncfgroot $rootdevice

rm -r $TMPDIR

echo -n Done
[[ $vnd == true ]] && echo -n " (image $dest)"
echo
